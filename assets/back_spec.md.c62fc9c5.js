import{_ as s,o as l,c as a,V as n}from"./chunks/framework.580080a9.js";const F=JSON.parse('{"title":"规范","description":"","frontmatter":{"sidebarDepth":3},"headers":[],"relativePath":"back/spec.md","filePath":"back/spec.md","lastUpdated":1689067074000}'),o={name:"back/spec.md"},p=n(`<h1 id="规范" tabindex="-1">规范 <a class="header-anchor" href="#规范" aria-label="Permalink to &quot;规范&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">介绍</p><p>项目遵从规范，约定。</p></div><h2 id="开发工具强制统一" tabindex="-1">开发工具强制统一 <a class="header-anchor" href="#开发工具强制统一" aria-label="Permalink to &quot;开发工具强制统一&quot;">​</a></h2><ul><li>前端: VS Code</li><li>后端: IntelliJ IDEA</li><li>数据库设计: CHINER</li><li>数据库客户端: DataGrip</li></ul><h2 id="idea-推荐安装插件" tabindex="-1">IDEA 推荐安装插件 <a class="header-anchor" href="#idea-推荐安装插件" aria-label="Permalink to &quot;IDEA 推荐安装插件&quot;">​</a></h2><ul><li>Lombok：自动生成get set等方法</li><li>Maven Helper： maven 依赖排查</li><li>Free Mybatis plugin: mybatis xml 快速切换</li><li>RestfulTool： 接口查找</li><li>Alibaba Java Coding Guidelines ： 阿里代码编码指南</li><li>Git commit Template： git 提交消息模板</li><li>GitToolBox： Git工具</li></ul><h2 id="vs-code-推荐安装插件" tabindex="-1">VS Code 推荐安装插件 <a class="header-anchor" href="#vs-code-推荐安装插件" aria-label="Permalink to &quot;VS Code 推荐安装插件&quot;">​</a></h2><ul><li>Iconify IntelliSense- Iconify 图标插件</li><li>windicss IntelliSense- windicss 提示插件</li><li>I18n-ally- i18n 插件</li><li>Vetur- vue 开发必备 （也可以选择 Volar）</li><li>ESLint- 脚本代码检查</li><li>Prettier- 代码格式化</li><li>Stylelint- css 格式化</li><li>DotENV- .env 文件 高亮</li></ul><h2 id="项目约定-规范命名" tabindex="-1">项目约定（规范命名） <a class="header-anchor" href="#项目约定-规范命名" aria-label="Permalink to &quot;项目约定（规范命名）&quot;">​</a></h2><ul><li>源码、jdk、mysql、redis、rabbitmq、seata等存放路径禁止包含中文、空格、特殊字符等。</li></ul><h2 id="数据库设计-参考sys-user表" tabindex="-1">数据库设计 (参考sys_user表) <a class="header-anchor" href="#数据库设计-参考sys-user表" aria-label="Permalink to &quot;数据库设计 (参考sys_user表)&quot;">​</a></h2><ul><li>使用CHINER来设计表结构</li><li>必须显式指定主键, 勿用复合主键. 主键的命名统一为: id</li><li>任何表至少包含3个字段： bigint id、 varchar createdBy、varchar lastModifiedBy、datetime createdDate、datetime lastModifiedDate (可以自行修改 EntityType)</li><li>关于状态字段根据业务含义命名为: enabled</li><li>如（隐藏、显示），（是、否），（可用、不可用）、(启用、禁用) 等字段用 enabled</li><li>界面上要显示成树形结构的表, 至少需要3个字段: id、parent_id、sort</li><li>表中有以下含义的字段, 尽可能的采用同样的命名规则:</li><li>名称: name (树型结构用: label)</li><li>编码: code</li><li>描述: description</li><li>最后修改数据的用户ID: lastModifiedBy</li><li>最后修改数据的时间: lastModifiedDate</li><li>是否内置数据: readonly_</li><li>不得使用外键与级联，一切外键概念必须在应用层解决</li><li>不用存储过程</li><li>数据库名、表名、字段名统一使用小写 + _</li><li>varchar 是可变长字符串，不预先分配存储空间，长度不要超过 5000，如果存储长 度大于此值，定义字段类型为 text，独立出来- 一张表，用主键来对应，避免影响其它字段索 引效率。</li><li>表名命名规则: “b_业务名称_表的作用” 、 “c_业务名称_表的作用” . b_ 表示业务表, c_表示核心表(权限系统的一整套)</li><li>表、字段 必须加注释</li><li>表名注释支持换行，第一行会被视为表名。 表的介绍请换行填写。</li><li>字段的第一行视为字段简介，详细介绍和枚举类型请换行</li><li>所有字段尽量根据业务设置合理的缺省值，尽量避免表中出现 NULL值</li><li>当字段为外键时，字段名为： 关联表_id， 注释需要在字段注释基础上，换行加上#关联表表名来说明关联的哪张表。（注意英文#号）</li><li>当字段为枚举时，需按照下面当格式添加注释：</li></ul><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">注释模板1： 注释内容 </span><span style="color:#89DDFF;">#</span><span style="color:#A6ACCD;">枚举类名{枚举值英文名:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">枚举值英文注释</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">;  </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">注释模板2： 注释内容 </span><span style="color:#89DDFF;">#</span><span style="color:#A6ACCD;">枚举类名{枚举值英文名:</span><span style="color:#FFCB6B;">val</span><span style="color:#A6ACCD;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">枚举值英文注释</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">;  </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">注释模板3： 注释内容 </span><span style="color:#89DDFF;">#</span><span style="color:#A6ACCD;">枚举类名{枚举值英文名:</span><span style="color:#FFCB6B;">val</span><span style="color:#A6ACCD;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">枚举值英文注释</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">,val2;  </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">注释模板4： 注释内容 </span><span style="color:#89DDFF;">#</span><span style="color:#A6ACCD;">{枚举值英文名:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">枚举值英文注释</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">;  </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">其中枚举类名可以没有，如果没有，则生成的枚举值名为：表对应的实体名 </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> 当前字段对应的属性名(首字母大写) </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> Enum </span></span>
<span class="line"><span style="color:#A6ACCD;">枚举值例子：</span></span>
<span class="line"><span style="color:#A6ACCD;">    文件类型 </span><span style="color:#89DDFF;">#</span><span style="color:#82AAFF;">FileType</span><span style="color:#A6ACCD;">{</span><span style="color:#FFCB6B;">PAN</span><span style="color:#A6ACCD;">:云盘数据;</span><span style="color:#FFCB6B;">API</span><span style="color:#A6ACCD;">:接口数据}</span></span>
<span class="line"><span style="color:#A6ACCD;">    数据类型 </span><span style="color:#89DDFF;">#</span><span style="color:#82AAFF;">DataType</span><span style="color:#A6ACCD;">{</span><span style="color:#FFCB6B;">DIR</span><span style="color:#A6ACCD;">:</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">,目录;</span><span style="color:#FFCB6B;">IMAGE</span><span style="color:#A6ACCD;">:</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">,图片;</span><span style="color:#FFCB6B;">VIDEO</span><span style="color:#A6ACCD;">:</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">,视频;</span><span style="color:#FFCB6B;">AUDIO</span><span style="color:#A6ACCD;">:</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">,音频;</span><span style="color:#FFCB6B;">DOC</span><span style="color:#A6ACCD;">:</span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">,文档;</span><span style="color:#FFCB6B;">OTHER</span><span style="color:#A6ACCD;">:</span><span style="color:#F78C6C;">6</span><span style="color:#A6ACCD;">,其他}</span></span>
<span class="line"><span style="color:#A6ACCD;">    数据类型 </span><span style="color:#89DDFF;">#</span><span style="color:#A6ACCD;">{</span><span style="color:#FFCB6B;">DIR</span><span style="color:#A6ACCD;">:目录;</span><span style="color:#FFCB6B;">IMAGE</span><span style="color:#A6ACCD;">:图片;</span><span style="color:#FFCB6B;">VIDEO</span><span style="color:#A6ACCD;">:视频;</span><span style="color:#FFCB6B;">AUDIO</span><span style="color:#A6ACCD;">:音频;</span><span style="color:#FFCB6B;">DOC</span><span style="color:#A6ACCD;">:文档;</span><span style="color:#FFCB6B;">OTHER</span><span style="color:#A6ACCD;">:其他}</span></span></code></pre></div><h3 id="六、git-提交规范" tabindex="-1">六、Git 提交规范 <a class="header-anchor" href="#六、git-提交规范" aria-label="Permalink to &quot;六、Git 提交规范&quot;">​</a></h3><ul><li>每次提交尽量按功能点或bug提交代码，哪怕是只修改了一行代码，一个字母，尽量不要一次性提交过多的功能和bug等；</li><li>及时拉取、及时提交、及时推送、及时合并；</li><li>提交代码前,记得勾选IDEA提交框中的Reformat code、Rearrage code、Optimize imports选项；</li><li>提交代码时按照以下模版进行注释；</li></ul><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">feat 增加新功能</span></span>
<span class="line"><span style="color:#A6ACCD;">fix 修复问题</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">BUG</span></span>
<span class="line"><span style="color:#A6ACCD;">style 代码风格相关无影响运行结果的</span></span>
<span class="line"><span style="color:#A6ACCD;">perf 优化</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">性能提升</span></span>
<span class="line"><span style="color:#A6ACCD;">refactor 重构</span></span>
<span class="line"><span style="color:#A6ACCD;">revert 撤销修改</span></span>
<span class="line"><span style="color:#A6ACCD;">test 测试相关</span></span>
<span class="line"><span style="color:#A6ACCD;">docs 文档</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">注释</span></span>
<span class="line"><span style="color:#A6ACCD;">chore 依赖更新</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">脚手架配置修改等</span></span>
<span class="line"><span style="color:#A6ACCD;">workflow 工作流改进</span></span>
<span class="line"><span style="color:#A6ACCD;">ci 持续集成</span></span>
<span class="line"><span style="color:#A6ACCD;">mod 不确定分类的修改</span></span>
<span class="line"><span style="color:#A6ACCD;">wip 开发中</span></span>
<span class="line"><span style="color:#A6ACCD;">types 类型修改</span></span></code></pre></div>`,16),e=[p];function t(i,c,r,C,A,y){return l(),a("div",null,e)}const d=s(o,[["render",t]]);export{F as __pageData,d as default};
